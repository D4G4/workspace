() -> Federal/Arrow function:

Definition:
  They make our code more concise ,and simplify function scoping and the 'this' keyword.
  They are one-line mini functions which work much like Lambdas in other languages.
  By using arrow functions we avoid having to type the 'function' and 'return' keyword and 'curly braces'.

When you define a federal function without placing any curly ( {} ) braces, there is an
implicit return the function defined after it.

NOTE Implicit return only happens for single statement arrow functions.

e.g
  #Without Arrow function (ES5)
|
|  var multiplyES5 =
|       function(x, y) {
|          return x * y;
|        };

  #With Arrow Function (ES6)

| const multiplyES6 = (x, y) => { return x * y };

    or Curly braces aren't required if only one expression is present.

| const multiplyES6 = (x, y) => (x * y);

  #Basic syntax with one parameter

| const phraseSplitterEs6 = (param1) => param1.split(" ");
| const phraseSplitterEs6 = parameter => parameter.split(" ");

NOTE: Parentheses are required when no parameters are present.


More on Arrow functions

//Arrow function uses lexical 'this'

| function Prefixer(prefix) {
|   this.prefix = prefix;
| }
|
| let animal = {
|   Prefixer
| }
|
| Prefixer.prototype.prefixArray = function(arr){
|     let self = this;
|     return arr.map( function(x) {
|        console.log(self.prefix + x);
|      });
|  }
|
|  //arrow functions save us from using let self = this and ...
|  Prefixer.prototype.prefixArray1UsingArrowFunction = function(arr){
|      return arr.map( (x) => {
|          console.log(this.prefix + x);
|      });
|  }
|
|  let pre = new Prefixer('hello ');
|  pre.prefixArray(['Brad','Jeff']);
|  pre.prefixArray1UsingArrowFunction(['Brad','Jeff']);
|
|  let add = function(a, b){
|    let sum = a + b;
|    console.log(sum);
|    return false;
|  }
|
|  let add1 = (a, b) => {
|    let sum = a + b;
|    console.log(sum);
|  }
|
|  add(2, 2);
|  add1(2, 2);

          ------------XX--------------
*Basic Syntax:

|  (param1, param2, …, paramN) => { statements }
|  (param1, param2, …, paramN) => expression  // equivalent to: => { return expression; }
|
|  // Parentheses are optional when there's only one parameter name:
|  (singleParam) => { statements }
|  singleParam => { statements }
|
|  // The parameter list for a function with no parameters should be written with a pair of parentheses.
|  () => { statements }

*Advance Syntax:

|  //Parentheses the body of a function to return an object literal expression
|   params => ({foo : bar});
|
|  //Rest parameters and default parameters are supported
|   (param1, param2, ...rest) => { statements }
|   (param1 = defaultValue1, param2, …, paramN = defaultValueN) => {
|   statements }
|
|  //Destructing within the parameter list is also supported
|   var f = ([a, b] = [1, 2], {x: c} = {x : a + b}) => a + b + c;
|   f();    //6


          ------------XX--------------

Important thing to remember about any javaScript file is :
  There are no global variables that we can refer to.

-------------------------------X-------------------------------X-------------------------------X-------------------------------

StrictMode:

Sometimes you'll see default non strict mode referred to as "Sloppy" mode;
A StrictMode isn't just a subset, it intentionally has different semantics from normal code.

  Changes made by StrictMode:
    1. Eliminates some of the JS silent errors by changing them to throw errors.
    2. Fixes mistakes that make it difficult for JS engines to perform optimizations
    3. Prohibits some syntax likely to be defined in the future versions of ECMAScript.


Invoking StrictMode:

  StrictMode applies to entire scripts or to individual functions. It doesn't apply to block
  statements enclosed in {} braces.

  'eval' code, 'Function' code, 'event handler' attributes,
  strings passed to 'WindowTimers.setTimeout()', and the like are entire scripts,
  and invoking strict mode in them works as expected.

  How to invoke it?

|   //Whole-script strict mode syntax
|   'use strict';
|    var v = "Hi! I'm a strict mode script!";
|
|
|    Strict mode for functions

Likewise, to invoke strict mode for a function,
put the exact statement "use strict"; (or 'use strict';) in the
function's body before any other statements.

| function strict() {
|   // Function-level strict mode syntax
|   'use strict';
|   function nested() { return 'And so am I!'; }
|   return "Hi!  I'm a strict mode function!  " + nested();
| }
| function notStrict() { return "I'm not strict."; }

-------------------------------X-------------------------------X-------------------------------X-------------------------------

# Using 'this'

To pass the value of this from one context to another, use call, or apply:

|  // An object can be passed as the first argument to call or apply and
|  // this will be bound to it.
|  var obj = {a: 'Custom'};
|
|  // This property is set on the global object
|  var a = 'Global';
|
|  function whatsThis() {
|    return this.a;  // The value of this is dependent on how the function is called
|    }
|
|    whatsThis();          // 'Global'
|    whatsThis.call(obj);  // 'Custom'
|    whatsThis.apply(obj); // 'Custom'

Where a function uses the this keyword in its body,
its value can be bound to a particular object in the call
 using the call or apply methods which all functions inherit from Function.prototype.


# call()

The call() method calls a function with a given 'this' value
and arguments provided individually.
(pass object name if working with objects)

|   function Product(name, price) {
|     this.name = name;
|     this.price = price;
|   }
|
|   function Food(name, price) {
|     Product.call(this, name, price);
|     this.category = 'food';
|   }
|
|   console.log(new Food('cheese', 5).name);
|   // expected output: "cheese"


#apply()

Every function has a method (yes, functions are objects in JS) named `apply`
`apply` lets you determine the value of `this` and also lets you pass in the array of arguments.

| function foo(a,b){
| console.log(a);
| console.log(b);
| console.log(this);
| }
|
| var args = ['ah', 'be'];
| foo.apply('valueOfThis',args);


The apply() method calls a function with a given this value, and arguments provided as an `array` (or an array-like object).

|   var numbers = [5, 6, 2, 3, 7];
|
|   var max = Math.max.apply(null, numbers);
|
|   console.log(max);
|   // expected output: 7
|
|   var min = Math.min.apply(null, numbers);
|
|   console.log(min);
|   // expected output: 2


NOTE that with call and apply, if the value passed as this is not an object,
an attempt will be made to convert it to an object using the internal ToObject operation.
So if the value passed is a primitive like 7 or 'foo', it will be
converted to an Object using the related constructor, so the primitive
number 7 is converted to an object as if by `new Number(7)` and
the string 'foo' to an object as if by `new String('foo')`.

-------------------------------X-------------------------------X-------------------------------X-------------------------------

# The bind method
ECMAScript 5 introduced Function.prototype.bind
Calling `f.bind(someObject)` creates a new function with the same body and scope as 'f',
but where 'this' occurs in the original function, it will be permanently bounded to the first argument
of `bind` regardless of how the function is being used.

|  function f(){
|    return this.a;
|  }
|
|  var g = f.bind({a: 'sup'});
|  document.write(g());          //sup
|
|  var h = f.bind({a : 'bra'});
|  document.write(h());          //bra
|
|  var h = g.bind({a: 'yo'});    //bind only works once!
|  document.write(h());          //sup
|
|  var o = {a: 36, f: f, g: g, h: h};
|  console.log(o.f(),o.f(),o.g(),o.h()); //36, 36, sup, sup

-------------------------------X-------------------------------X-------------------------------X-------------------------------

# 'arguments'

 The arguments object is an Array-like object corresponding to the arguments passed to a function.
 The arguments object is a local variable available within all (non-arrow) functions.
 You can refer to a function's arguments within the function by using the arguments object.
 This object contains an entry for each argument passed to the function, the first entry's index starting at 0.

|  function func1(a, b, c) {
|  console.log(arguments[0]);
|  // expected output: 1
|
|  console.log(arguments[1]);
|  // expected output: 2
|
|  console.log(arguments[2]);
|  // expected output: 3
|  }
|
|  func1(1, 2, 3);

Output: > 1
        > 2
        > 3

The arguments object is not an Array. It is similar to an Array, but does not have any Array properties except length.


Using 'typeof' with Arguments  will return the typeof individual arguments.



-------------------------------X-------------------------------X-------------------------------X-------------------------------

#'new.target'

The new.target property lets you detect whether a function or constructor was
called using the new operator. In constructors and functions instantiated with the new operator,
new.target returns a reference to the constructor or function.
In normal function calls, new.target is undefined.

| function Foo() {
| if (!new.target) throw 'Foo() must be called with new';
| }
|
| try {
| Foo();
| }
| catch(e) {
| console.log(e);
| // expected output: "Foo() must be called with new"
| }

The new.target syntax consists of the keyword "new", a dot, and a property name "target".
Normally "new." serves as the context for a `property access`,
but here "new." is not really an object.

In constructor calls, however, new.target refers to the constructor invoked by new and
so "new." becomes a virtual context.


        -----------------XX--------------

new.target in FUNCTION CALLS

In normal function calls (as opposed to constructor function calls),
new.target is undefined. This lets you detect if a function was called with new as a constructor.

| function Foo() {
|   if (!new.target) throw 'Foo() must be called with new';
|   console.log('Foo instantiated with new');
| }
|
| Foo(); // throws "Foo() must be called with new"
| new Foo(); // logs "Foo instantiated with new"

        -----------------XX--------------

new.target in CONSTRUCTORS

In class constructors, new.target refers to the constructor that was DIRECTLY
invoked by new. This is also the case if the constructor is in a parent class and
was delegated from a child constructor.

| class A {
|   constructor() {
|     console.log(new.target.name);
|   }
| }
|
| class B extends A { constructor() { super(); } }
|
| var a = new A(); // logs -> A
| var b = new B(); // logs -> B
|
| class C { constructor() { console.log(new.target); } }
| class D extends C { constructor() { super(); } }
|
| var c = new C(); // logs -> class C{constructor(){console.log(new.target);}}
| var d = new D(); // logs -> class D extends C{constructor(){super();}}


Thus from the above example of class C and D, it seems that new.target
points to the class Definition of class which is initialized. For example,
when D was initialized using new, the class definition of D was printed and
similarly in case of c, class C was printed.


-------------------------------X-------------------------------X-------------------------------X-------------------------------

# Rest parameters

| The rest parameter syntax allows us to represent an indefinite number of arguments as an array
|
| function sum(...theArgs) {
|   return theArgs.reduce((previous, current) => {
|     return previous + current;
|   });
| }
|
| console.log(sum(1, 2, 3));
| // expected output: 6
|
| console.log(sum(1, 2, 3, 4));
| // expected output: 10


# Default parameter

Default function parameters allow formal parameters to be initialized with default values
if no value or undefined is passed.

| function multiply(a, b = 1) {
|   return a * b;
| }
|
| console.log(multiply(5, 2));
| // expected output: 10
|
| console.log(multiply(5));
| // expected output: 5


-------------------------------X-------------------------------X-------------------------------X-------------------------------
NOTE There are four ways to invoke a function

#1 As a Method:
A Method is a function that's attached to an object
When invoked as a method, `this` will be bound to the object, the function/method is a part of.

| var foo = {};
| foo.someMethod = function(){
|   console.log('Logging a method ' + this);    // [object Object]
| }
| foo.someMethod();
| console.log('Type of `foo` is ' +  typeof(foo));

#2 As A function:
If you have a stand alone function, the `this` variable will be bound to the "global" object,
almost always the window object in context of a browser.

| var foo = function(){
|   console.log(this);      // undefined
| }
| foo();
| console.log('Type of `foo` is ' +  typeof(foo));


#3 As a Constructor

| function Foo(){
|   this.confusing = 'hell yeah';
| }
| var myObject = new Foo();
|
| console.log(myObject.confusing);


#4 With `apply()`:
Every function has a method (yes, functions are objects in JS) named `apply`
Apply lets you determine the value of `this` and also lets you pass in the array of arguments.

| function foo(a,b){
|   console.log(a);
|   console.log(b);
|   console.log(this);
| }
|
| var args = ['ah', 'be'];
| foo.apply('omg',args);

-------------------------------X-------------------------------X-------------------------------X-------------------------------
#Prototype:
The below example will clear all your doubts related to prototype

| //x is a method assigned to the object using "this"
| var A = function () {
|   this.x = function() { console.log('A'); };
| }
|
| A.prototype.updateX = function(value){
|   this.x = function() { console.log(value); }
| };
|
| var a1 = new A();
| var a2 = new A();
|
| a1.x();   //Displays 'A'
| a2.x();   //Also  displays 'A'
|
| a1.updateX('Z');
| a1.x();   //Displays 'Z'
| a2.x();   //Still displays 'A'
|
| //x is a method assigned to the object using "prototype"
| var B = function() { };
|
| B.prototype.x = function() {console.log('B'); };
|
| B.prototype.updateX = function( value ) {
|   B.prototype.x = function() { console.log( value ); };
| }
|
| var b1 = new B();
| var b2 = new B();
|
| b1.x();    //'B'
| b2.x();   //'B'
| b1.updateX('Y');
| b1.x();   // 'Y'
| b2.x();   // Also displays 'Y' because by using prototype, we can change the value of X for all instances
|
//In conclusion, in the first example a copy of the function is assigned to each instance.
//In the second example a single copy of the function is shared by all instances.




#More on Prototyping

| function talk(){
|   var daksh = 20;
|   // console.log('this.daksh = ' ,this.daksh);
|   // console.log('daksh =      ' ,daksh);
|   //console.log('this =       ' ,this);
|   console.log('this.sound = ' , this.sound);
| }
|
| let animal = {
|   //talkk: talk,
|   //or simply type 'talk' if you want the function name to be same
|   talk
| }
|
| //Whatever will be on the left of the .takk() will be reffered to as `this`
| console.log('animal.talk()');
| animal.talk();
| //animal.talk();
|
| let cat = {
|   sound: 'meow'
| }
| //cat.talk();     //error cat does not have a function
| console.log("\nSetting prototype for cat");
*| Object.setPrototypeOf(cat, animal)
| console.log('\ncat.talk()');
| cat.talk();
|
| let prarieCat = {
|   howl: function(){
|     console.log(this.sound.toUpperCase() + "!!!");
|   }
| }
|
| console.log("\nChanged animal.talk function");
| animal.talk = function(){
|   console.log("Changed function ");
| }
| console.log('\ncat.talk()');
| cat.talk();
|
| //prarieCat.howl();     -> error
| Object.setPrototypeOf(prarieCat, cat);
| console.log('\nprarieCat.howl');
| prarieCat.howl();
| prarieCat.talk();
|

Output:
 _______________________________________
| animal.talk()                         |
| this.sound =  undefined               |
| Setting prototype for cat             |
|                                       |
| cat.talk()                            |
| this.sound =  meow                    |
| Changed animal.talk function          |
|                                       |
| cat.talk()                            |
| Changed function                      |
|                                       |
| prarieCat.howl                        |
| MEOW!!!                               |
| Changed function                      |
|_______________________________________|

/*
It is important to understand that Prototypes are delegates.
Thet are not copies of the original object.

So they won't act like a class which act as copying blueprint and overriding it.
*/

-------------------------------X-------------------------------X-------------------------------X-------------------------------

bind allows-

set the value of "this" to an specific object. This becomes very helpful as sometimes this is not what is intended.
reuse methods
curry a function
For example, you have a function to deduct monthly club fees

function getMonthlyFee(fee){
  var remaining = this.total - fee;
  this.total = remaining;
  return this.name +' remaining balance:'+remaining;
}
Now you want to reuse this function for a different club member. Note that the monthly fee will vary from member to member.

Let's imagine Rachel has a balance of 500, and a monthly membership fee of 90.

var rachel = {name:'Rachel Green', total:500};
Now, create a function that can be used again and again to deduct the fee from her account every month

//bind
var getRachelFee = getMonthlyFee.bind(rachel, 90);
//deduct
getRachelFee();//Rachel Green remaining balance:410
getRachelFee();//Rachel Green remaining balance:320
Now, the same getMonthlyFee function could be used for another member with a different membership fee. For Example, Ross Geller has a 250 balance and a monthly fee of 25

var ross = {name:'Ross Geller', total:250};
//bind
var getRossFee = getMonthlyFee.bind(ross, 25);
//deduct
getRossFee(); //Ross Geller remaining balance:225
getRossFee(); //Ross Geller remaining balance:200
