__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _react2 = _require(_dependencyMap[0], "react");

  var _react3 = _interopRequireDefault(_react2);

  var _index = _require(_dependencyMap[1], "./../../node_modules/react-transform-hmr/lib/index.js");

  var _index2 = _interopRequireDefault(_index);

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _jsxFileName = "/home/daksh/workspace/employeeManager/src/components/EmployeeList.js";

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _reactRedux = _require(_dependencyMap[2], "react-redux");

  var _reactNative = _require(_dependencyMap[3], "react-native");

  var _lodash = _require(_dependencyMap[4], "lodash");

  var _lodash2 = _interopRequireDefault(_lodash);

  var _actions = _require(_dependencyMap[5], "../actions");

  var _ListItem = _require(_dependencyMap[6], "./ListItem");

  var _ListItem2 = _interopRequireDefault(_ListItem);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _components = {
    EmployeeList: {
      displayName: "EmployeeList"
    }
  };

  var _node_modulesReactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: "/home/daksh/workspace/employeeManager/src/components/EmployeeList.js",
    components: _components,
    locals: [module],
    imports: [_react3.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _node_modulesReactTransformHmrLibIndexJs2(Component, id);
    };
  }

  var EmployeeList = _wrapComponent("EmployeeList")(function (_Component) {
    _inherits(EmployeeList, _Component);

    function EmployeeList() {
      _classCallCheck(this, EmployeeList);

      return _possibleConstructorReturn(this, (EmployeeList.__proto__ || Object.getPrototypeOf(EmployeeList)).apply(this, arguments));
    }

    _createClass(EmployeeList, [{
      key: "componentWillMount",
      value: function componentWillMount() {
        this.props.employeesFetchAction();
        this.createDataSource(this.props);
      }
    }, {
      key: "componentWillReceiveProps",
      value: function componentWillReceiveProps(updatedProps) {
        console.log('New props received in EmployeeList');
        console.log(updatedProps);
        this.createDataSource(updatedProps);
      }
    }, {
      key: "createDataSource",
      value: function createDataSource(_ref) {
        var employees = _ref.employees;
        var ds = new _reactNative.ListView.DataSource({
          rowHasChanged: function rowHasChanged(r1, r2) {
            return r1 !== r2;
          }
        });
        this.dataSource = ds.cloneWithRows(employees);
      }
    }, {
      key: "renderRow",
      value: function renderRow(employee) {
        return _react3.default.createElement(_ListItem2.default, {
          employee: employee,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 35
          }
        });
      }
    }, {
      key: "render",
      value: function render() {
        console.log('EmployeeList -> render()');
        console.log(this.props);
        return _react3.default.createElement(_reactNative.ListView, {
          enableEmptySections: true,
          dataSource: this.dataSource,
          renderRow: this.renderRow,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 42
          }
        });
      }
    }]);

    return EmployeeList;
  }(_react2.Component));

  var mapStateToProps = function mapStateToProps(state) {
    console.log('Inside mapStateToPtops');
    console.log(state);

    var employees = _lodash2.default.map(state.employeeReducer, function (val, keyUID) {
      return _extends({}, val, {
        keyUID: keyUID
      });
    });

    return {
      employees: employees
    };
  };

  exports.default = (0, _reactRedux.connect)(mapStateToProps, {
    employeesFetchAction: _actions.employeesFetchAction
  })(EmployeeList);
});